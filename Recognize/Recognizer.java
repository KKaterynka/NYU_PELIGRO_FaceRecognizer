
package com.mycompany.recognitionApp.Recognize;

import com.mycompany.recognitionApp.connectToDB.Conn;
import org.bytedeco.javacpp.BytePointer;
import org.bytedeco.javacpp.DoublePointer;
import org.bytedeco.javacpp.IntPointer;
import org.bytedeco.opencv.global.opencv_imgproc;
import org.bytedeco.opencv.opencv_core.*;
import org.bytedeco.opencv.opencv_face.FaceRecognizer;
import org.bytedeco.opencv.opencv_face.LBPHFaceRecognizer;
import org.bytedeco.opencv.opencv_objdetect.CascadeClassifier;
import org.bytedeco.opencv.opencv_videoio.VideoCapture;

import javax.imageio.ImageIO;
import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.sql.Array;

import static org.bytedeco.opencv.global.opencv_imgcodecs.imencode;
import static org.bytedeco.opencv.global.opencv_imgcodecs.imwrite;
import static org.bytedeco.opencv.global.opencv_imgproc.*;

/**
 *
 * @author User
 */
public class Recognizer extends javax.swing.JFrame {

    private Recognizer.DaemonThread myThread = null;

    // OpenCV
    //VideoCapture cap = cv2.VideoCapture(0, cv2.CAP_DSHOW)
    VideoCapture webSource = null;
    Mat cameraImage = new Mat();
    CascadeClassifier classifier = new CascadeClassifier("D:\\FaceRecognizer\\samples\\haarcascade_frontalface_alt.xml");
    FaceRecognizer recognizer = LBPHFaceRecognizer.create();
    BytePointer pointer = new BytePointer();
    RectVector detectedFace = new RectVector();

    int idPerson;

    // connection
    Conn connection = new Conn();

    public Recognizer() {
        initComponents();

        // extract LBHP classifier for training purposes
        recognizer.read("D:\\FaceRecognizer\\samples\\classifierLBHP.yml");
        recognizer.setThreshold(80);

        // start video
        startCamera();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        photoPool = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        recognizedCriminalName = new javax.swing.JLabel();
        recognizedCriminalID = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Recognize");

        photoPool.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 255)));

        jPanel2.setBackground(new java.awt.Color(204, 204, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 255)));

        recognizedCriminalName.setBackground(new java.awt.Color(204, 180, 245));
        recognizedCriminalName.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        recognizedCriminalName.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        recognizedCriminalName.setText("First Name, Last Name");
        recognizedCriminalName.setOpaque(true);

        recognizedCriminalID.setBackground(new java.awt.Color(204, 180, 245));
        recognizedCriminalID.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        recognizedCriminalID.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        recognizedCriminalID.setText("Criminal #0");
        recognizedCriminalID.setOpaque(true);

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(19, 19, 19)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(recognizedCriminalID, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(recognizedCriminalName, javax.swing.GroupLayout.PREFERRED_SIZE, 320, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(19, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(recognizedCriminalID, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(recognizedCriminalName, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(17, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(photoPool, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(17, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(photoPool, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 26, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(Recognizer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(Recognizer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(Recognizer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(Recognizer.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new Recognizer().setVisible(true);
            }
        });
    }

    class DaemonThread implements Runnable {

        protected volatile boolean runnable = false;

        @Override
        public void run() {
            synchronized (this) {
                while (runnable) {
                    try {
                        boolean isGrabbed = webSource.grab();
                        if (isGrabbed) {
                            // retrieving the image that the video captures
                            webSource.retrieve(cameraImage);
                            // extracting that image
                            Graphics g = photoPool.getGraphics();

                            // read the image
                            Mat imageColor = new Mat();
                            // define image from camera
                            imageColor = cameraImage;

                            // converting the image to gray scale
                            Mat imageGray = new Mat();
                            cvtColor(imageColor, imageGray, COLOR_BGRA2GRAY);

                            // save detected faces
                            RectVector detectedFaces = new RectVector();
                            //detecting face in the grayscale image
                            classifier.detectMultiScale(imageColor, detectedFaces, 1.1, 2, 0, new Size(150, 150), new Size(500, 500));

                            // iterate through each detected face
                            for (int i = 0; i < detectedFaces.size(); i++) {
                                Rect detectedFace = detectedFaces.get(i);

                                // draw rectangle to each detected face
                                rectangle(cameraImage, detectedFace, new Scalar(0, 255, 0, 0));

                                Mat faceCapture = new Mat(imageGray, detectedFace);
                                opencv_imgproc.resize(faceCapture, faceCapture, new Size(160, 160));

                                IntPointer pointer1 = new IntPointer(1);
                                DoublePointer doublePointer = new DoublePointer(1);
                                // predict which face is in the camera
                                recognizer.predict(faceCapture, pointer1, doublePointer);
                                // get label
                                int prediction = pointer1.get(0);

                                // if the face not recognized/ no face
                                if (prediction == -1){
                                    // write it
                                    //recognizedCriminalID
                                    recognizedCriminalID.setText("");
                                    recognizedCriminalName.setText("");
                                } else {
                                    // if recognized, record it
                                    System.out.println(doublePointer.get(0));
                                    idPerson = prediction;
                                    rec();
                                    // write it
                                }
                            }

                            // format image
                            imencode(".bmp", cameraImage, pointer);

                            // Convert to array
                            Image im = ImageIO.read(new ByteArrayInputStream(pointer.getStringBytes()));
                            BufferedImage buff = (BufferedImage) im;
                            try {
                                if (g.drawImage(buff, 0, 0, getHeight(), getWidth()-100, 0, 0, buff.getWidth(), buff.getHeight(), null)) {
                                    if (runnable == false) {
                                        this.wait();
                                    }
                                }
                            } catch (Exception e) {
                            }
                        }

                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }
                stopCamera();
            }
        }
    }

    private void rec(){
        // set labels based on recognized face
        // perform GUI-interacting task in a dedicated DaemonThread
        SwingWorker worker = new SwingWorker() {
            @Override
            protected Object doInBackground() throws Exception {
                // establish connection
                connection.connect();
                // find the person's characteristics
                connection.executeSQL("SELECT * FROM criminal WHERE id = " + idPerson);
                while (connection.rs.next()){
                    // set id and full name of criminal
                    recognizedCriminalID.setText("Criminal #" + idPerson);
                    recognizedCriminalName.setText(connection.rs.getString("first_name") + " " +
                            connection.rs.getString("last_name"));

                    Array identification = connection.rs.getArray(2);
                    String[] criminal = (String[]) identification.getArray();

                }
                connection.disconnect();
                return recognizedCriminalID;
            }
        };
        worker.execute();
    }

    public void stopCamera(){
        // stop the camera capturing
        myThread.runnable = false;
        // Release video device
        webSource.release();
        //dispose();
    }

    public void startCamera(){
        // cv2.VideoCapture(0, cv2.CAP_DSHOW)
        webSource = new VideoCapture(0);

        myThread = new DaemonThread();
        Thread t = new Thread(myThread);
        t.setDaemon(true);
        myThread.runnable = true;
        t.start();

        //webSource.release();
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel jLabel1;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel photoPool;
    private javax.swing.JLabel recognizedCriminalID;
    private javax.swing.JLabel recognizedCriminalName;
    // End of variables declaration//GEN-END:variables
}
