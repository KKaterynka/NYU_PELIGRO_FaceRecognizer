
package com.mycompany.recognitionApp.Capture;



import com.mycompany.recognitionApp.connectToDB.ModelOfCriminal;

import java.awt.Graphics;
import java.awt.Image;
import java.awt.image.BufferedImage;
import java.io.ByteArrayInputStream;
import java.io.File;
import java.io.FilenameFilter;
import java.nio.IntBuffer;
import javax.imageio.ImageIO;
import org.bytedeco.javacpp.BytePointer;

import static com.googlecode.javacv.cpp.opencv_highgui.CV_LOAD_IMAGE_GRAYSCALE;
import static org.bytedeco.opencv.global.opencv_core.CV_32SC1;

import org.bytedeco.opencv.global.opencv_imgproc;

import static org.bytedeco.opencv.global.opencv_imgcodecs.*;
import static org.bytedeco.opencv.global.opencv_imgproc.COLOR_BGRA2GRAY;
import static org.bytedeco.opencv.global.opencv_imgproc.cvtColor;
import static org.bytedeco.opencv.global.opencv_imgproc.rectangle;
import static org.opencv.videoio.Videoio.CAP_DSHOW;

import org.bytedeco.opencv.opencv_core.*;
import org.bytedeco.opencv.opencv_face.FaceRecognizer;
import org.bytedeco.opencv.opencv_face.LBPHFaceRecognizer;
import org.bytedeco.opencv.opencv_objdetect.CascadeClassifier;
import org.bytedeco.opencv.opencv_videoio.VideoCapture;

/**
 *
 * @author User
 */
public class CapturePerson extends javax.swing.JFrame {

    // thread is used for displaying camera
    private CapturePerson.DaemonThread myThread = null;
    public static String fullName = null;

    // OpenCV
    //VideoCapture cap = cv2.VideoCapture(0, cv2.CAP_DSHOW)
    VideoCapture webSource = null;
    Mat cameraImage = new Mat();

    CascadeClassifier classifier = new CascadeClassifier("D:\\FaceRecognizer\\samples\\haarcascade_frontalface_alt.xml");
    BytePointer pointer = new BytePointer();
    RectVector detectedFace = new RectVector();

    // programme variables
    String root;
    String firstNamePerson, lastNamePerson, dobPerson, agePerson, genderPerson,phonePerson, cityPerson, statePerson;
    int idPerson;
    int numSamples = 5;
    int sample = 1;

    public CapturePerson() {

    }

    public CapturePerson(int id, String firstNamePerson, String lastNamePerson, String dobPerson, String agePerson,
                         String genderPerson, String phonePerson, String cityPerson, String statePerson) {
        initComponents();

        // fill in all the required parameters
        this.idPerson = id;
        this.firstNamePerson = firstNamePerson;
        this.lastNamePerson = lastNamePerson;
        this.agePerson = agePerson;
        this.genderPerson = genderPerson;
        this.cityPerson = cityPerson;
        this.statePerson = statePerson;
        this.phonePerson = phonePerson;
        this.dobPerson = dobPerson;

        // turn on the camera
        startCamera();
    }


    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        photoPool = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        counterLabel = new javax.swing.JLabel();
        saveButton = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setBackground(new java.awt.Color(255, 255, 255));
        jLabel1.setFont(new java.awt.Font("SansSerif", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(102, 102, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("Capture");

        photoPool.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(102, 102, 255)));

        jPanel2.setBackground(new java.awt.Color(204, 204, 255));
        jPanel2.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(153, 153, 255)));

        counterLabel.setBackground(new java.awt.Color(204, 204, 255));
        counterLabel.setFont(new java.awt.Font("SansSerif", 1, 24)); // NOI18N
        counterLabel.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        counterLabel.setText("02");
        counterLabel.setOpaque(true);

        saveButton.setBackground(new java.awt.Color(204, 180, 245));
        saveButton.setFont(new java.awt.Font("SansSerif", 0, 14)); // NOI18N
        saveButton.setText("Take photos");
        saveButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                saveButtonActionPerformed(evt);
            }
        });

        jLabel4.setText("Click two times");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addComponent(counterLabel, javax.swing.GroupLayout.PREFERRED_SIZE, 37, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(2, 2, 2)
                .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(saveButton, javax.swing.GroupLayout.PREFERRED_SIZE, 204, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(15, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(counterLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 44, Short.MAX_VALUE)
                    .addComponent(saveButton))
                .addContainerGap())
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(18, 18, 18)
                .addComponent(jLabel4)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel1, javax.swing.GroupLayout.DEFAULT_SIZE, 396, Short.MAX_VALUE)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(photoPool, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(photoPool, javax.swing.GroupLayout.PREFERRED_SIZE, 331, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 15, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void saveButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_saveButtonActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_saveButtonActionPerformed
//
//    static {
//
//        System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
//    }
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Windows".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CapturePerson.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CapturePerson.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CapturePerson.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CapturePerson.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

//        System.out.println(Core.NATIVE_LIBRARY_NAME);
        //System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        //OpenCV
        //System.load(new File("/usr/local/Cellar/opencv/2.4.10.1/share/OpenCV/java/libopencv_java2410.dylib").getAbsolutePath());
        //System.loadLibrary(Core.NATIVE_LIBRARY_NAME);
        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                //new CapturePerson().setVisible(true);
            }
        });//-Djava.library.path="C:\path to the .dll file"
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel counterLabel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JLabel photoPool;
    private javax.swing.JButton saveButton;
    // End of variables declaration//GEN-END:variables

    class DaemonThread implements Runnable {

        protected volatile boolean runnable = false;

        @Override
        public void run() {
            synchronized (this) {
                while (runnable) {
                    try {
                        boolean isGrabbed = webSource.grab();
                        if (isGrabbed) {
                            // retrieving the image that the video captures
                            webSource.retrieve(cameraImage);
                            // extracting that image
                            Graphics g = photoPool.getGraphics();

                            // read the image
                            Mat imageColor = new Mat();
                            // define image from camera
                            imageColor = cameraImage;

                            // converting the image to gray scale
                            Mat imageGray = new Mat();
                            cvtColor(imageColor, imageGray, COLOR_BGRA2GRAY);

                            // save detected faces
                            RectVector detectedFaces = new RectVector();
                            //detecting face in the grayscale image
                            classifier.detectMultiScale(imageColor, detectedFaces, 1.1, 1, 1, new Size(150, 150), new Size(500, 500));

                            // iterate through each detected face
                            for (int i = 0; i < detectedFaces.size(); i++) {
                                // detect only one face
                                Rect detectedFace = detectedFaces.get(0);

                                // draw rectangle to each detected face
                                rectangle(imageColor, detectedFace, new Scalar(255, 255, 0, 2), 3, 0, 0);

                                Mat face = new Mat(imageGray, detectedFace);
                                opencv_imgproc.resize(face, face, new Size(160, 160));

                                if (saveButton.getModel().isPressed()) {

                                        if (sample <= numSamples) {
                                            // save the cropped and grayscaled image
                                            String cropped = "D:\\FaceRecognizer\\samples\\person." + idPerson + "." + sample + ".jpg";
                                            //write result
                                            imwrite(cropped, face);

                                            sample += 1;
                                        }
                                        if (sample > 5) {
                                            // train and save images
                                            generate();

                                            // add up new entry to db
                                            insertIntoDatabase();

                                            // do not need camera no more
                                            stopCamera();
                                        }

//                                    }
                                }
                            }

                            // format image
                            imencode(".bmp", cameraImage, pointer);

                            // Convert to array
                            Image im = ImageIO.read(new ByteArrayInputStream(pointer.getStringBytes()));
                            BufferedImage buff = (BufferedImage) im;
                            try {
                                if (g.drawImage(buff, 0, 0, 360, 390, 0, 0, buff.getWidth(), buff.getHeight(), null)) {
                                    if (runnable == false) {
                                        this.wait();
                                    }
                                }
                            } catch (Exception e) {
                            }
                        }

                    } catch (Exception ex) {
                        ex.printStackTrace();
                    }
                }
            }
        }
    }

    public static String getFullName(){
        return fullName;
    }

    public void generate(){
        // directory where all images of captured criminals are contained
        File directory = new File("D:\\FaceRecognizer\\samples\\");
        // take in only jpg and png
        FilenameFilter filter = new FilenameFilter() {
            @Override
            public boolean accept(File dir, String name) {
                return name.endsWith(".jpg") || name.endsWith(".png");
            }
        };

        // take photos and label them based on the name of file
        File[] files = directory.listFiles(filter);
//        List<Mat> photos = new ArrayList<>();
        MatVector photos = new MatVector(files.length);
        Mat labels = new Mat(files.length, 1, CV_32SC1);
        IntBuffer labelsBuffer = labels.createBuffer();

        // give every five images the same label
        int counter = 0;
        for (File image: files){
            Mat photo = imread(image.getAbsolutePath(), CV_LOAD_IMAGE_GRAYSCALE);
            int idPerson = Integer.parseInt(image.getName().split("\\.")[1]);
            opencv_imgproc.resize(photo, photo, new Size(160, 160));

            photos.put(counter, photo);
            labelsBuffer.put(counter, idPerson);
            counter++;
        }

        // train images with lbhp algorithm
        FaceRecognizer lbhp = LBPHFaceRecognizer.create();
        lbhp.train(photos, labels);
        // save the image. Now programme is able to recognize this person
        lbhp.save("D:\\FaceRecognizer\\samples\\classifierLBHP.yml");
    }

    public void insertIntoDatabase(){
        // insert the model of criminal into db
        // based on arguments of modelCrime
        ModelOfCriminal modelCrime = new ModelOfCriminal();

        // setting all the required parameters
        modelCrime.setFirstName(this.firstNamePerson);
        modelCrime.setLastName(this.lastNamePerson);
        modelCrime.setDob(this.dobPerson);
        modelCrime.setAge(this.agePerson);
        modelCrime.setGender(this.genderPerson);
        modelCrime.setPhoneNumnber(this.phonePerson);
        modelCrime.setCity(this.cityPerson);
        modelCrime.setState(this.statePerson);
        modelCrime.setID(this.idPerson);

        modelCrime.insert();
        fullName = this.firstNamePerson + " " + this.lastNamePerson;
    }

    public void stopCamera(){
        // stop the camera capturing
        myThread.runnable = false;
        // Release video device
        webSource.release();
        dispose();
    }

    public void startCamera(){
       // cv2.VideoCapture(0, cv2.CAP_DSHOW)
        webSource = new VideoCapture(0, CAP_DSHOW);

        myThread = new DaemonThread();
        Thread t = new Thread(myThread);
        t.setDaemon(true);
        myThread.runnable = true;
        t.start();

        //webSource.release();
    }
}
